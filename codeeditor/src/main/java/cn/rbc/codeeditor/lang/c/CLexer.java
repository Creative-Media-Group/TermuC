// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: c.flex

package cn.rbc.codeeditor.lang.c;

import cn.rbc.codeeditor.util.Lexer;


@SuppressWarnings("fallthrough")
public class CLexer implements Lexer {

	/** This character denotes the end of file. */
	public static final int YYEOF = -1;

	/** Initial size of the lookahead buffer. */
	private static final int ZZ_BUFFERSIZE = 16384;

	// Lexical states.
	public static final int YYINITIAL = 0;
	public static final int STRING = 2;
	public static final int CHARLITERAL = 4;
	public static final int PRETREATMENT = 6;
	public static final int DEFINE = 8;
	public static final int DEFINE_NEW_LINE = 10;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
	};

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

	private static int [] zzUnpackcmap_top() {
		int [] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\4\30\2\31\1\10\1\32\1\33\1\10"+
    "\1\33\1\10\1\6\1\34\1\35\1\36\1\37\1\40"+
    "\1\37\2\41\1\42\2\41\1\43\3\41\1\44\7\41"+
    "\1\45\2\41\1\46\1\47\1\50\1\10\1\51\1\6"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\41\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\41\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\10\1\103\1\10\6\0\1\104"+
    "\32\0\1\105\1\6\4\13\4\6\1\13\2\6\1\0"+
    "\7\6\1\13\4\6\1\13\5\6\27\13\1\6\37\13"+
    "\1\6\u01ca\13\4\6\14\13\16\6\5\13\7\6\1\13"+
    "\1\6\1\13\21\6\160\0\5\13\1\6\2\13\2\6"+
    "\4\13\1\6\1\13\6\6\1\13\1\6\3\13\1\6"+
    "\1\13\1\6\24\13\1\6\123\13\1\6\213\13\1\6"+
    "\5\0\2\6\246\13\1\6\46\13\2\6\1\13\6\6"+
    "\51\13\6\6\1\13\1\6\55\0\1\6\1\0\1\6"+
    "\2\0\1\6\2\0\1\6\1\0\10\6\33\13\4\6"+
    "\4\13\15\6\6\0\5\6\1\13\4\6\13\0\1\6"+
    "\1\0\3\6\53\13\37\0\4\6\2\13\1\0\143\13"+
    "\1\6\1\13\10\0\1\6\6\0\2\13\2\0\1\6"+
    "\4\0\2\13\12\0\3\13\2\6\1\13\17\6\1\0"+
    "\1\13\1\0\36\13\33\0\2\6\131\13\13\0\1\13"+
    "\16\6\12\0\41\13\11\0\2\13\4\6\1\13\2\6"+
    "\1\0\30\13\4\0\1\13\11\0\1\13\3\0\1\13"+
    "\5\0\22\6\31\13\3\0\4\6\13\13\65\6\25\13"+
    "\1\6\22\13\13\6\61\0\66\13\3\0\1\13\22\0"+
    "\1\13\7\0\12\13\2\0\2\6\12\0\1\6\20\13"+
    "\3\0\1\6\10\13\2\6\2\13\2\6\26\13\1\6"+
    "\7\13\1\6\1\13\3\6\4\13\2\6\1\0\1\13"+
    "\7\0\2\6\2\0\2\6\3\0\1\13\10\6\1\0"+
    "\4\6\2\13\1\6\3\13\2\0\2\6\12\0\4\13"+
    "\7\6\2\13\1\6\1\0\2\6\3\0\1\6\6\13"+
    "\4\6\2\13\2\6\26\13\1\6\7\13\1\6\2\13"+
    "\1\6\2\13\1\6\2\13\2\6\1\0\1\6\5\0"+
    "\4\6\2\0\2\6\3\0\3\6\1\0\7\6\4\13"+
    "\1\6\1\13\7\6\14\0\3\13\1\0\13\6\3\0"+
    "\1\6\11\13\1\6\3\13\1\6\26\13\1\6\7\13"+
    "\1\6\2\13\1\6\5\13\2\6\1\0\1\13\10\0"+
    "\1\6\3\0\1\6\3\0\2\6\1\13\17\6\2\13"+
    "\2\0\2\6\12\0\1\6\1\13\7\6\1\13\6\0"+
    "\1\6\3\0\1\6\10\13\2\6\2\13\2\6\26\13"+
    "\1\6\7\13\1\6\2\13\1\6\5\13\2\6\1\0"+
    "\1\13\7\0\2\6\2\0\2\6\3\0\7\6\3\0"+
    "\4\6\2\13\1\6\3\13\2\0\2\6\12\0\1\6"+
    "\1\13\20\6\1\0\1\13\1\6\6\13\3\6\3\13"+
    "\1\6\4\13\3\6\2\13\1\6\1\13\1\6\2\13"+
    "\3\6\2\13\3\6\3\13\3\6\14\13\4\6\5\0"+
    "\3\6\3\0\1\6\4\0\2\6\1\13\6\6\1\0"+
    "\16\6\12\0\11\6\1\13\6\6\5\0\10\13\1\6"+
    "\3\13\1\6\27\13\1\6\20\13\3\6\1\13\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\1\6\3\13"+
    "\5\6\2\13\2\0\2\6\12\0\20\6\1\13\3\0"+
    "\1\6\10\13\1\6\3\13\1\6\27\13\1\6\12\13"+
    "\1\6\5\13\2\6\1\0\1\13\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\7\6\1\13\1\6\2\13"+
    "\2\0\2\6\12\0\1\6\2\13\15\6\4\0\11\13"+
    "\1\6\3\13\1\6\51\13\2\0\1\13\7\0\1\6"+
    "\3\0\1\6\4\0\1\13\5\6\3\13\1\0\7\6"+
    "\3\13\2\0\2\6\12\0\12\6\6\13\1\6\3\0"+
    "\1\6\22\13\3\6\30\13\1\6\11\13\1\6\1\13"+
    "\2\6\7\13\3\6\1\0\4\6\6\0\1\6\1\0"+
    "\1\6\10\0\6\6\12\0\2\6\2\0\15\6\60\13"+
    "\1\0\2\13\7\0\4\6\10\13\10\0\1\6\12\0"+
    "\47\6\2\13\1\6\1\13\1\6\5\13\1\6\30\13"+
    "\1\6\1\13\1\6\12\13\1\0\2\13\11\0\1\13"+
    "\2\6\5\13\1\6\1\13\1\6\6\0\2\6\12\0"+
    "\2\6\4\13\40\6\1\13\27\6\2\0\6\6\12\0"+
    "\13\6\1\0\1\6\1\0\1\6\1\0\4\6\2\0"+
    "\10\13\1\6\44\13\4\6\24\0\1\6\2\0\5\13"+
    "\13\0\1\6\44\0\11\6\1\0\71\6\53\13\24\0"+
    "\1\13\12\0\6\6\6\13\4\0\4\13\3\0\1\13"+
    "\3\0\2\13\7\0\3\13\4\0\15\13\14\0\1\13"+
    "\17\0\2\6\46\13\1\6\1\13\5\6\1\13\2\6"+
    "\53\13\1\6\115\13\1\6\4\13\2\6\7\13\1\6"+
    "\1\13\1\6\4\13\2\6\51\13\1\6\4\13\2\6"+
    "\41\13\1\6\4\13\2\6\7\13\1\6\1\13\1\6"+
    "\4\13\2\6\17\13\1\6\71\13\1\6\4\13\2\6"+
    "\103\13\2\6\3\0\40\6\20\13\20\6\126\13\2\6"+
    "\6\13\3\6\u016c\13\2\6\21\13\1\105\32\13\5\6"+
    "\113\13\3\6\13\13\7\6\15\13\1\6\4\13\3\0"+
    "\13\6\22\13\3\0\13\6\22\13\2\0\14\6\15\13"+
    "\1\6\3\13\1\6\2\0\14\6\64\13\40\0\3\6"+
    "\1\13\3\6\2\13\1\0\2\6\12\0\41\6\4\0"+
    "\1\6\12\0\6\6\131\13\7\6\5\13\2\0\42\13"+
    "\1\0\1\13\5\6\106\13\12\6\37\13\1\6\14\0"+
    "\4\6\14\0\12\6\12\0\36\13\2\6\5\13\13\6"+
    "\54\13\4\6\32\13\6\6\12\0\46\6\27\13\5\0"+
    "\4\6\65\13\12\0\1\6\35\0\2\6\13\0\6\6"+
    "\12\0\15\6\1\13\10\6\16\0\1\6\2\0\77\6"+
    "\5\0\57\13\21\0\7\13\4\6\12\0\21\6\11\0"+
    "\14\6\3\0\36\13\15\0\2\13\12\0\54\13\16\0"+
    "\14\6\44\13\24\0\10\6\12\0\3\6\3\13\12\0"+
    "\44\13\2\6\11\13\7\6\53\13\2\6\3\13\20\6"+
    "\3\0\1\6\25\0\4\13\1\0\6\13\1\0\2\13"+
    "\3\0\1\13\5\6\300\13\72\0\1\6\5\0\26\13"+
    "\2\6\6\13\2\6\46\13\2\6\6\13\2\6\10\13"+
    "\1\6\1\13\1\6\1\13\1\6\1\13\1\6\37\13"+
    "\2\6\65\13\1\6\7\13\1\6\1\13\3\6\3\13"+
    "\1\6\7\13\3\6\4\13\2\6\6\13\4\6\15\13"+
    "\5\6\3\13\1\6\7\13\3\6\13\105\5\0\30\6"+
    "\2\3\5\0\1\105\17\6\2\13\23\6\1\13\12\6"+
    "\1\105\5\0\1\6\12\0\1\6\1\13\15\6\1\13"+
    "\20\6\15\13\3\6\40\13\20\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\13\4\6\1\13\2\6\12\13"+
    "\1\6\1\13\3\6\5\13\6\6\1\13\1\6\1\13"+
    "\1\6\1\13\1\6\4\13\1\6\13\13\2\6\4\13"+
    "\5\6\5\13\4\6\1\13\21\6\51\13\u0177\6\57\13"+
    "\1\6\57\13\1\6\205\13\6\6\4\13\3\0\2\13"+
    "\14\6\46\13\1\6\1\13\5\6\1\13\2\6\70\13"+
    "\7\6\1\13\17\6\1\0\27\13\11\6\7\13\1\6"+
    "\7\13\1\6\7\13\1\6\7\13\1\6\7\13\1\6"+
    "\7\13\1\6\7\13\1\6\7\13\1\6\40\0\57\6"+
    "\1\13\320\6\1\105\4\6\3\13\31\6\11\13\6\0"+
    "\1\6\5\13\2\6\5\13\4\6\126\13\2\6\2\0"+
    "\2\6\3\13\1\6\132\13\1\6\4\13\5\6\53\13"+
    "\1\6\136\13\21\6\40\13\60\6\320\13\100\6\375\13"+
    "\3\6\215\13\103\6\56\13\2\6\15\13\3\6\20\13"+
    "\12\0\2\13\24\6\57\13\1\0\4\6\12\0\1\6"+
    "\37\13\2\0\120\13\2\0\45\6\11\13\2\6\147\13"+
    "\2\6\65\13\2\6\11\13\52\6\15\13\1\0\3\13"+
    "\1\0\4\13\1\0\27\13\5\0\4\6\1\0\13\6"+
    "\1\13\7\6\64\13\14\6\2\0\62\13\22\0\12\6"+
    "\12\0\6\6\22\0\6\13\3\6\1\13\1\6\2\13"+
    "\13\0\34\13\10\0\2\6\27\13\15\0\14\6\35\13"+
    "\3\6\4\0\57\13\16\0\16\6\1\13\12\0\6\6"+
    "\5\13\1\0\12\13\12\0\5\13\1\6\51\13\16\0"+
    "\11\6\3\13\1\0\10\13\2\0\2\6\12\0\6\6"+
    "\27\13\3\6\1\13\3\0\62\13\1\0\1\13\3\0"+
    "\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\6"+
    "\3\13\2\6\13\13\5\0\2\6\3\13\2\0\12\6"+
    "\6\13\2\6\6\13\2\6\6\13\11\6\7\13\1\6"+
    "\7\13\1\6\53\13\1\6\16\13\6\6\163\13\10\0"+
    "\1\6\2\0\2\6\12\0\6\6\244\13\14\6\27\13"+
    "\4\6\61\13\4\6\u0100\106\156\13\2\6\152\13\46\6"+
    "\7\13\14\6\5\13\5\6\1\13\1\0\12\13\1\6"+
    "\15\13\1\6\5\13\1\6\1\13\1\6\2\13\1\6"+
    "\2\13\1\6\154\13\41\6\153\13\22\6\100\13\2\6"+
    "\66\13\50\6\15\13\3\6\20\0\20\6\20\0\3\6"+
    "\2\13\30\6\3\13\31\6\1\13\6\6\5\13\1\6"+
    "\207\13\2\6\1\0\4\6\1\13\13\6\12\0\7\6"+
    "\32\13\4\6\1\13\1\6\32\13\13\6\131\13\3\6"+
    "\6\13\2\6\6\13\2\6\6\13\2\6\3\13\3\6"+
    "\2\13\3\6\2\13\22\6\3\0\4\6\14\13\1\6"+
    "\32\13\1\6\23\13\1\6\2\13\1\6\17\13\2\6"+
    "\16\13\42\6\173\13\105\6\65\13\210\6\1\0\202\6"+
    "\35\13\3\6\61\13\17\6\1\0\37\6\40\13\15\6"+
    "\36\13\5\6\46\13\5\0\5\6\36\13\2\6\44\13"+
    "\4\6\10\13\1\6\5\13\52\6\236\13\2\6\12\0"+
    "\6\6\44\13\4\6\44\13\4\6\50\13\10\6\64\13"+
    "\234\6\67\13\11\6\26\13\12\6\10\13\230\6\6\13"+
    "\2\6\1\13\1\6\54\13\1\6\2\13\3\6\1\13"+
    "\2\6\27\13\12\6\27\13\11\6\37\13\101\6\23\13"+
    "\1\6\2\13\12\6\26\13\12\6\32\13\106\6\70\13"+
    "\6\6\2\13\100\6\1\13\3\0\1\6\2\0\5\6"+
    "\4\0\4\13\1\6\3\13\1\6\35\13\2\6\3\0"+
    "\4\6\1\0\40\6\35\13\3\6\35\13\43\6\10\13"+
    "\1\6\34\13\2\0\31\6\66\13\12\6\26\13\12\6"+
    "\23\13\15\6\22\13\156\6\111\13\67\6\63\13\15\6"+
    "\63\13\15\6\44\13\4\0\10\6\12\0\u0146\6\52\13"+
    "\1\6\2\0\3\6\2\13\116\6\35\13\12\6\1\13"+
    "\10\6\26\13\13\0\137\6\25\13\33\6\27\13\11\6"+
    "\3\0\65\13\17\0\37\6\12\0\17\6\4\0\55\13"+
    "\13\0\2\6\1\0\17\6\1\0\2\6\31\13\7\6"+
    "\12\0\6\6\3\0\44\13\16\0\1\6\12\0\4\6"+
    "\1\13\2\0\1\13\10\6\43\13\1\0\2\6\1\13"+
    "\11\6\3\0\60\13\16\0\4\13\4\6\4\0\1\6"+
    "\14\0\1\13\1\6\1\13\43\6\22\13\1\6\31\13"+
    "\14\0\6\6\1\0\101\6\7\13\1\6\1\13\1\6"+
    "\4\13\1\6\17\13\1\6\12\13\7\6\57\13\14\0"+
    "\5\6\12\0\6\6\4\0\1\6\10\13\2\6\2\13"+
    "\2\6\26\13\1\6\7\13\1\6\2\13\1\6\5\13"+
    "\1\6\2\0\1\13\7\0\2\6\2\0\2\6\3\0"+
    "\2\6\1\13\6\6\1\0\5\6\5\13\2\0\2\6"+
    "\7\0\3\6\5\0\213\6\65\13\22\0\4\13\5\6"+
    "\12\0\4\6\1\0\3\13\36\6\60\13\24\0\2\13"+
    "\1\6\1\13\10\6\12\0\246\6\57\13\7\0\2\6"+
    "\11\0\27\6\4\13\2\0\42\6\60\13\21\0\3\6"+
    "\1\13\13\6\12\0\46\6\53\13\15\0\1\13\7\6"+
    "\12\0\66\6\33\13\2\6\17\0\4\6\12\0\306\6"+
    "\54\13\17\0\145\6\100\13\12\0\25\6\10\13\2\6"+
    "\1\13\2\6\10\13\1\6\2\13\1\6\30\13\6\0"+
    "\1\6\2\0\2\6\4\0\1\13\1\0\1\13\2\0"+
    "\14\6\12\0\106\6\10\13\2\6\47\13\7\0\2\6"+
    "\7\0\1\13\1\6\1\13\1\0\33\6\1\13\12\0"+
    "\50\13\7\0\1\13\4\0\10\6\1\0\10\6\1\13"+
    "\13\0\56\13\20\0\3\6\1\13\42\6\71\13\7\6"+
    "\11\13\1\6\45\13\10\0\1\6\10\0\1\13\17\6"+
    "\12\0\30\6\36\13\2\6\26\0\1\6\16\0\111\6"+
    "\7\13\1\6\2\13\1\6\46\13\6\0\3\6\1\0"+
    "\1\6\2\0\1\6\7\0\1\13\1\0\10\6\12\0"+
    "\6\6\6\13\1\6\2\13\1\6\40\13\5\0\1\6"+
    "\2\0\1\6\5\0\1\13\7\6\12\0\u0136\6\23\13"+
    "\4\0\271\6\1\13\54\6\4\13\37\6\232\13\146\6"+
    "\157\13\21\6\304\13\274\6\57\13\1\6\11\0\307\6"+
    "\107\13\271\6\71\13\7\6\37\13\1\6\12\0\146\6"+
    "\36\13\2\6\5\0\13\6\60\13\7\0\11\6\4\13"+
    "\14\6\12\0\11\6\25\13\5\6\23\13\260\6\100\13"+
    "\200\6\113\13\4\6\1\0\1\13\67\0\7\6\4\0"+
    "\15\13\100\6\2\13\1\6\1\13\1\0\13\6\2\0"+
    "\16\6\370\13\10\6\326\13\52\6\11\13\367\6\37\13"+
    "\61\6\3\13\21\6\4\13\10\6\u018c\13\4\6\153\13"+
    "\5\6\15\13\3\6\11\13\7\6\12\13\3\6\2\0"+
    "\1\6\4\0\301\6\5\0\3\6\26\0\2\6\7\0"+
    "\36\6\4\0\224\6\3\0\273\6\125\13\1\6\107\13"+
    "\1\6\2\13\2\6\1\13\2\6\2\13\2\6\4\13"+
    "\1\6\14\13\1\6\1\13\1\6\7\13\1\6\101\13"+
    "\1\6\4\13\2\6\10\13\1\6\7\13\1\6\34\13"+
    "\1\6\4\13\1\6\5\13\1\6\1\13\3\6\7\13"+
    "\1\6\u0154\13\2\6\31\13\1\6\31\13\1\6\37\13"+
    "\1\6\31\13\1\6\37\13\1\6\31\13\1\6\37\13"+
    "\1\6\31\13\1\6\37\13\1\6\31\13\1\6\10\13"+
    "\2\6\151\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\7\0\1\6\21\0"+
    "\2\6\7\0\1\6\2\0\1\6\5\0\325\6\55\13"+
    "\3\6\7\0\7\13\2\6\12\0\4\6\1\13\u0171\6"+
    "\54\13\16\0\5\6\306\13\13\6\7\0\51\6\104\13"+
    "\7\0\1\13\4\6\12\0\u0156\6\1\13\117\6\4\13"+
    "\1\6\33\13\1\6\2\13\1\6\1\13\2\6\1\13"+
    "\1\6\12\13\1\6\4\13\1\6\1\13\1\6\1\13"+
    "\6\6\1\13\4\6\1\13\1\6\1\13\1\6\1\13"+
    "\1\6\3\13\1\6\2\13\1\6\1\13\2\6\1\13"+
    "\1\6\1\13\1\6\1\13\1\6\1\13\1\6\1\13"+
    "\1\6\2\13\1\6\1\13\2\6\4\13\1\6\7\13"+
    "\1\6\4\13\1\6\4\13\1\6\1\13\1\6\12\13"+
    "\1\6\21\13\5\6\3\13\1\6\5\13\1\6\21\13"+
    "\u0134\6\12\0\6\6\336\13\42\6\65\13\13\6\336\13"+
    "\2\6\u0182\13\16\6\u0131\13\37\6\36\13\342\6\113\13"+
    "\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

	private static int [] zzUnpackcmap_blocks() {
		int [] result = new int[31232];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int [] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\4\2\14\1\15"+
    "\1\16\1\17\20\6\1\20\1\21\1\22\2\23\1\24"+
    "\1\1\1\25\1\26\1\1\2\27\2\30\1\31\2\32"+
    "\7\0\1\33\2\34\4\14\2\33\1\0\1\14\1\0"+
    "\11\6\1\35\5\6\1\35\13\6\2\22\4\0\1\36"+
    "\5\0\1\34\2\14\1\0\1\33\2\14\16\6\1\37"+
    "\17\6\10\0\2\34\3\14\23\6\1\0\1\40\4\0"+
    "\3\14\11\6\1\0\1\36\2\0\3\14\4\6\3\14"+
    "\2\6\3\14\1\6\3\14\1\6\5\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\33\1\0\1\33\1\0\4\33";

	private static int [] zzUnpackAction() {
		int [] result = new int[257];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u01f1\0\u01aa\0\u01aa\0\u0238\0\u027f\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u01aa\0\u02c6\0\u030d\0\u0354\0\u039b\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u01aa\0\u01aa\0\u0852\0\u01aa\0\u0899\0\u01aa\0\u08e0"+
    "\0\u01aa\0\u01aa\0\u0927\0\u01aa\0\u030d\0\u01aa\0\u030d\0\u01aa"+
    "\0\u01aa\0\u096e\0\u0238\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09"+
    "\0\u0d50\0\u01aa\0\u0d97\0\u01aa\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3"+
    "\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb"+
    "\0\u1132\0\u1179\0\u11c0\0\u1207\0\u027f\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514"+
    "\0\u01aa\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d"+
    "\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad"+
    "\0\u1df4\0\u027f\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e"+
    "\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e"+
    "\0\u2455\0\u01aa\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff"+
    "\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f"+
    "\0\u2ab6\0\u2afd\0\u01aa\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u01aa\0\u2ffb\0\u3042\0\u3089"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1"+
    "\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9"+
    "\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731"+
    "\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969"+
    "\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92"+
    "\0\u3dd9";

	private static int [] zzUnpackRowMap() {
		int [] result = new int[257];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int [] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int [] ZZ_TRANS = zzUnpacktrans();

	private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\3\11\1\12\1\7\1\10\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\13\1\22\1\13"+
    "\1\23\1\24\1\25\4\26\1\27\1\13\12\16\1\30"+
    "\1\7\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\16\1\42\1\16\1\43\4\16\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\3\16\1\52\1\53"+
    "\1\11\1\10\1\7\2\54\1\55\2\54\1\56\3\54"+
    "\1\57\35\54\1\60\37\54\2\61\1\55\2\61\1\56"+
    "\6\61\1\62\32\61\1\63\37\61\1\7\1\64\3\55"+
    "\1\56\1\7\1\64\1\7\1\64\10\7\2\64\1\65"+
    "\5\64\1\7\13\64\3\7\31\64\2\7\1\55\1\64"+
    "\3\7\3\55\1\56\2\7\1\66\4\7\7\66\1\67"+
    "\22\66\1\70\34\66\1\55\3\7\1\66\2\71\1\66"+
    "\1\72\1\7\1\66\74\7\1\71\2\7\111\0\1\11"+
    "\113\0\1\73\45\0\1\74\1\75\3\0\1\76\1\0"+
    "\1\77\3\0\1\100\3\0\1\101\12\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\31\16\2\0"+
    "\1\16\27\0\5\102\74\0\1\103\4\0\1\104\105\0"+
    "\1\102\1\0\1\105\1\106\1\107\1\110\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\1\115\7\0\1\112"+
    "\1\113\1\112\4\0\1\114\3\0\1\113\6\0\1\115"+
    "\32\0\1\102\1\0\5\26\5\0\1\112\1\113\2\0"+
    "\1\114\1\113\10\0\1\112\1\113\1\112\4\0\1\114"+
    "\3\0\1\113\16\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\1\16\1\116\1\117\3\16\1\120\3\16\3\0"+
    "\31\16\2\0\1\16\2\0\1\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\23\16\1\121\5\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\20\16\1\122\10\16\2\0\1\16\2\0"+
    "\1\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\1\16\1\123\6\16\1\124\5\16\1\125\12\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\5\16\1\126\10\16\1\127\12\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\13\16\1\130\1\16\1\131\10\16\1\132"+
    "\2\16\2\0\1\16\2\0\1\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\13\16\1\133\2\16\1\134"+
    "\12\16\2\0\1\16\2\0\1\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\16\16\1\121\12\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\6\16\1\135\6\16\1\136\13\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\16\16\1\137\12\16\2\0\1\16\2\0"+
    "\1\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\5\16\1\140\23\16\2\0\1\16\2\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\10\16\1\141"+
    "\1\142\10\16\1\143\2\16\1\144\3\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\27\16\1\145\1\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\15\16"+
    "\1\146\13\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\16\16\1\147\12\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\10\16\1\150\20\16\2\0\1\16"+
    "\2\0\2\54\1\0\2\54\1\0\3\54\1\0\35\54"+
    "\1\0\37\54\2\0\1\55\104\0\5\151\1\152\100\151"+
    "\1\0\2\61\4\0\76\61\1\0\1\61\3\0\1\71"+
    "\162\0\1\153\114\0\1\154\1\0\1\155\2\0\1\156"+
    "\74\0\1\157\6\0\1\160\102\0\1\161\115\0\1\162"+
    "\103\0\1\163\45\0\5\102\5\0\1\112\1\113\3\0"+
    "\1\113\10\0\1\112\1\113\1\112\10\0\1\113\16\0"+
    "\17\103\1\164\67\103\2\104\4\0\41\104\1\165\34\104"+
    "\1\0\1\104\24\0\1\102\1\0\1\105\1\106\1\107"+
    "\1\110\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\41\0\1\102\1\0\4\110\1\111\5\0\1\112\1\113"+
    "\2\0\1\114\1\113\10\0\1\112\1\113\1\112\4\0"+
    "\1\114\3\0\1\113\41\0\1\102\1\0\4\166\1\111"+
    "\5\0\1\112\1\113\2\0\1\114\1\113\10\0\1\112"+
    "\1\113\1\112\4\0\1\114\3\0\1\113\41\0\1\102"+
    "\1\0\4\167\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\41\0\1\102\1\0\5\111\5\0\1\112\1\113"+
    "\3\0\1\113\10\0\1\112\1\113\1\112\10\0\1\113"+
    "\36\0\1\170\1\0\1\170\2\0\5\171\102\0\1\172"+
    "\4\173\2\0\5\173\11\0\6\173\27\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\16\16\1\174"+
    "\12\16\2\0\1\16\2\0\1\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\16\16\1\175\12\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\14\16\1\176\14\16\2\0\1\16\2\0"+
    "\1\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\22\16\1\177\6\16\2\0\1\16\2\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\5\16\1\200"+
    "\23\16\2\0\1\16\2\0\1\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\21\16\1\201\1\202\6\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\1\16\1\203\27\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\15\16\1\204\13\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\6\16"+
    "\1\205\22\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\23\16\1\206\5\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\21\16\1\201\7\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\23\16\1\207\5\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\22\16"+
    "\1\210\6\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\16\16\1\211\12\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\20\16\1\135\10\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\22\16\1\212\6\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\15\16"+
    "\1\213\13\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\7\16\1\214\12\16"+
    "\1\215\6\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\16\16\1\216\12\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\7\16\1\217\20\16\1\220\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\1\16\1\221\16\16\1\222\10\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\11\16\1\223\17\16\2\0\1\16\2\0"+
    "\1\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\17\16\1\224\11\16\2\0\1\16\2\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\11\16\1\225"+
    "\7\16\1\226\7\16\2\0\1\16\2\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\11\16\1\227"+
    "\1\16\1\230\15\16\2\0\1\16\2\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\11\16\1\231"+
    "\17\16\2\0\1\16\4\0\1\151\163\0\1\232\111\0"+
    "\1\233\7\0\1\234\71\0\1\235\122\0\1\236\72\0"+
    "\1\237\10\0\1\163\74\0\1\240\120\0\1\234\72\0"+
    "\1\241\111\0\1\237\31\0\17\103\1\164\4\103\1\242"+
    "\62\103\5\104\1\243\41\104\1\165\36\104\24\0\1\102"+
    "\1\0\4\244\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\41\0\1\102\1\0\4\245\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\43\0\5\171\102\0\5\171"+
    "\5\0\1\112\15\0\1\112\1\0\1\112\54\0\1\172"+
    "\4\173\2\0\5\173\2\0\1\114\6\0\6\173\4\0"+
    "\1\114\47\0\5\246\2\0\5\246\2\0\1\114\6\0"+
    "\6\246\4\0\1\114\22\0\1\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\16\16\1\247\12\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\14\16\1\250\14\16\2\0\1\16\2\0"+
    "\1\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\1\16\1\251\27\16\2\0\1\16\2\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\16\16\1\135"+
    "\12\16\2\0\1\16\2\0\1\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\1\16\1\252\27\16\2\0"+
    "\1\16\2\0\1\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\5\16\1\135\23\16\2\0\1\16\2\0"+
    "\1\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\3\16\1\253\25\16\2\0\1\16\2\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\20\16\1\212"+
    "\10\16\2\0\1\16\2\0\1\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\21\16\1\254\1\255\6\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\1\16\1\256\27\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\2\16\1\257\26\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\14\16"+
    "\1\135\14\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\5\16\1\260\23\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\1\16\1\136\27\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\7\16\1\212\21\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\11\16"+
    "\1\261\17\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\23\16\1\260\5\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\20\16\1\136\10\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\15\16\1\262\13\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\5\16"+
    "\1\263\23\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\22\16\1\264\6\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\23\16\1\265\5\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\22\16\1\202\6\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\5\16"+
    "\1\266\23\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\16\16\1\267\12\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\11\16\1\270\17\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\4\16\1\212\24\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\1\16"+
    "\1\271\27\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\13\16\1\201\15\16"+
    "\2\0\1\16\64\0\1\272\103\0\1\273\105\0\1\273"+
    "\112\0\1\233\113\0\1\274\75\0\1\275\114\0\1\276"+
    "\102\0\1\277\26\0\3\104\3\0\41\104\1\165\34\104"+
    "\1\0\1\104\24\0\1\102\1\0\4\300\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\301\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\302\2\0\5\302\2\0\1\114\6\0\6\302"+
    "\4\0\1\114\22\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\13\16\1\212\15\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\17\16\1\303\11\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\7\16"+
    "\1\304\21\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\12\16\1\135\16\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\10\16\1\135\20\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\22\16\1\135\6\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\11\16"+
    "\1\305\17\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\23\16\1\306\5\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\13\16\1\307\15\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\20\16\1\267\10\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\21\16"+
    "\1\310\7\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\5\16\1\227\23\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\16\16\1\311\12\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\11\16\1\312\17\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\3\16"+
    "\1\254\25\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\4\16\1\313\24\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\15\16\1\135\13\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\7\16\1\217\21\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\22\16"+
    "\1\150\6\16\2\0\1\16\70\0\1\314\111\0\1\273"+
    "\74\0\1\315\123\0\1\316\77\0\1\317\44\0\1\102"+
    "\1\0\4\320\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\41\0\1\102\1\0\4\321\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\43\0\5\322\2\0\5\322"+
    "\2\0\1\114\6\0\6\322\4\0\1\114\22\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\13\16"+
    "\1\323\15\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\11\16\1\324\17\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\15\16\1\325\13\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\13\16\1\254\15\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\5\16"+
    "\1\212\23\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\22\16\1\326\6\16"+
    "\2\0\1\16\2\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\6\16\1\135\22\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\3\16\1\135\25\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\5\16"+
    "\1\311\23\16\2\0\1\16\60\0\1\315\105\0\1\234"+
    "\103\0\1\273\57\0\1\102\1\0\4\327\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\330\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\331\2\0\5\331\2\0\1\114\6\0\6\331"+
    "\4\0\1\114\22\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\5\16\1\332\23\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\15\16\1\333\13\16\2\0\1\16\2\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\23\16"+
    "\1\201\5\16\2\0\1\16\2\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\5\16\1\134\23\16"+
    "\2\0\1\16\25\0\1\102\1\0\4\334\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\335\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\336\2\0\5\336\2\0\1\114\6\0\6\336"+
    "\4\0\1\114\22\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\26\16\1\212\2\16\2\0\1\16"+
    "\2\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\1\16\1\337\27\16\2\0\1\16\25\0\1\102"+
    "\1\0\4\340\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\41\0\1\102\1\0\4\341\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\43\0\5\342\2\0\5\342"+
    "\2\0\1\114\6\0\6\342\4\0\1\114\22\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\20\16"+
    "\1\343\10\16\2\0\1\16\25\0\1\102\1\0\4\344"+
    "\1\111\5\0\1\112\1\113\2\0\1\114\1\113\10\0"+
    "\1\112\1\113\1\112\4\0\1\114\3\0\1\113\41\0"+
    "\1\102\1\0\4\345\1\111\5\0\1\112\1\113\2\0"+
    "\1\114\1\113\10\0\1\112\1\113\1\112\4\0\1\114"+
    "\3\0\1\113\43\0\5\346\2\0\5\346\2\0\1\114"+
    "\6\0\6\346\4\0\1\114\22\0\1\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\27\16\1\212\1\16"+
    "\2\0\1\16\25\0\1\102\1\0\4\347\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\350\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\351\2\0\5\351\2\0\1\114\6\0\6\351"+
    "\4\0\1\114\45\0\1\102\1\0\4\352\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\353\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\354\2\0\5\354\2\0\1\114\6\0\6\354"+
    "\4\0\1\114\45\0\1\102\1\0\4\355\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\356\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\357\2\0\5\357\2\0\1\114\6\0\6\357"+
    "\4\0\1\114\45\0\1\102\1\0\4\360\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\361\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\362\2\0\5\362\2\0\1\114\6\0\6\362"+
    "\4\0\1\114\45\0\1\102\1\0\4\363\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\364\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\365\2\0\5\365\2\0\1\114\6\0\6\365"+
    "\4\0\1\114\45\0\1\102\1\0\4\366\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\367\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\370\2\0\5\370\2\0\1\114\6\0\6\370"+
    "\4\0\1\114\45\0\1\102\1\0\4\371\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\41\0\1\102\1\0"+
    "\4\372\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\43\0\5\373\2\0\5\373\2\0\1\114\6\0\6\373"+
    "\4\0\1\114\45\0\1\102\1\0\4\374\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\43\0\5\375\2\0"+
    "\5\375\2\0\1\114\6\0\6\375\4\0\1\114\45\0"+
    "\1\102\1\0\4\376\1\111\5\0\1\112\1\113\2\0"+
    "\1\114\1\113\10\0\1\112\1\113\1\112\4\0\1\114"+
    "\3\0\1\113\61\0\1\114\20\0\1\114\45\0\1\102"+
    "\1\0\4\377\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\41\0\1\102\1\0\4\u0100\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\1\102\1\0\4\u0101"+
    "\1\111\5\0\1\112\1\113\2\0\1\114\1\113\10\0"+
    "\1\112\1\113\1\112\4\0\1\114\3\0\1\113\41\0"+
    "\1\102\1\0\5\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\16\0";

	private static int [] zzUnpacktrans() {
		int [] result = new int[15904];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpacktrans(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/** Error code for "Unknown internal scanner error". */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	/** Error code for "could not match input". */
	private static final int ZZ_NO_MATCH = 1;
	/** Error code for "pushback value was too large". */
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
	 * {@link #ZZ_PUSHBACK_2BIG} respectively.
	 */
	private static final String ZZ_ERROR_MSG[] = {
		"Unknown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\3\11\1\1\2\11\2\1\4\11\4\1\3\11"+
    "\20\1\2\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\1\1\7\0"+
    "\10\1\1\11\1\0\1\11\1\0\33\1\1\11\1\1"+
    "\4\0\1\1\5\0\3\1\1\0\41\1\10\0\1\11"+
    "\27\1\1\0\1\11\4\0\14\1\1\0\1\11\2\0"+
    "\31\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\4\1";

	private static int [] zzUnpackAttribute() {
		int [] result = new int[257];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/** Input device. */
	private java.io.Reader zzReader;

	/** Current state of the DFA. */
	private int zzState;

	/** Current lexical state. */
	private int zzLexicalState = YYINITIAL;

	/**
	 * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
	 * string.
	 */
	private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

	/** Text position at the last accepting state. */
	private int zzMarkedPos;

	/** Current text position in the buffer. */
	private int zzCurrentPos;

	/** Marks the beginning of the {@link #yytext()} string in the buffer. */
	private int zzStartRead;

	/** Marks the last character in the buffer, that has been read from input. */
	private int zzEndRead;

	/**
	 * Whether the scanner is at the end of file.
	 * @see #yyatEOF
	 */
	private boolean zzAtEOF;

	/**
	 * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
	 *
	 * <p>When a lead/high surrogate has been read from the input stream into the final
	 * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/** Number of newlines encountered up to the start of the matched text. */
	private int yyline;

	/** Number of characters from the last newline up to the start of the matched text. */
	private int yycolumn;

	/** Number of characters up to the start of the matched text. */
	private long yychar;

	/** Whether the scanner is currently at the beginning of a line. */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	/** Whether the user-EOF-code has already been executed. */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;

	/* user code: */



	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	public CLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
	private int zzMaxBufferLen() {
		return Integer.MAX_VALUE;
	}

	/**  Whether the scanner buffer can grow to accommodate a larger token. */
	private boolean zzCanGrow() {
		return true;
	}

	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false} iff there was new input.
	 * @exception java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
							 zzBuffer, 0,
							 zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
			/* if not, and it can grow: blow it up */
			char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			if (requested == 0) {
				throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
			}
			else {
				throw new java.io.IOException(
					"Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
			}
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
				if (numRead == requested) { // We requested too few chars to encode a full Unicode character
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				} else {                    // There is room in the buffer for at least one more char
					int c = zzReader.read();  // Expecting to read a paired low surrogate char
					if (c == -1) {
						return true;
					} else {
						zzBuffer[zzEndRead++] = (char)c;
					}
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}


	/**
	 * Closes the input reader.
	 *
	 * @throws java.io.IOException if the reader could not be closed.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; // indicate end of file
		zzEndRead = zzStartRead; // invalidate buffer

		if (zzReader != null) {
			zzReader.close();
		}
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 *
	 * <p>Does not close the old reader.
	 *
	 * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
	 * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
	 *
	 * <p>Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader The new input stream.
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzEOFDone = false;
		yyResetPosition();
		zzLexicalState = YYINITIAL;
		int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
		if (zzBuffer.length > initBufferSize) {
			zzBuffer = new char[initBufferSize];
		}
	}

	/**
	 * Resets the input position.
	 */
	private final void yyResetPosition() {
		zzAtBOL  = true;
		zzAtEOF  = false;
		zzCurrentPos = 0;
		zzMarkedPos = 0;
		zzStartRead = 0;
		zzEndRead = 0;
		zzFinalHighSurrogate = 0;
		yyline = 0;
		yycolumn = 0;
		yychar = 0L;
	}


	/**
	 * Returns whether the scanner has reached the end of the reader it reads from.
	 *
	 * @return whether the scanner has reached EOF.
	 */
	public final boolean yyatEOF() {
		return zzAtEOF;
	}


	/**
	 * Returns the current lexical state.
	 *
	 * @return the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state.
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 *
	 * @return the matched text.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


	/**
	 * Returns the character at the given position from the matched text.
	 *
	 * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
	 *
	 * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
	 *
	 * @return the character at {@code position}.
	 */
	public final char yycharat(int position) {
		return zzBuffer[zzStartRead + position];
	}


	/**
	 * How many characters were matched.
	 *
	 * @return the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos-zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 *
	 * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen".
	 *
	 * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
	 * scanner etc.).
	 *
	 * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode the code of the error message to display.
	 */
	private static void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * <p>They will be read again by then next call of the scanning method.
	 *
	 * @param number the number of characters to be read again. This number must not be greater than
	 *     {@link #yylength()}.
	 */
	public void yypushback(int number)  {
		if ( number > yylength() )
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}




	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered
	 * or an I/O-Error occurs.
	 *
	 * @return the next token.
	 * @exception java.io.IOException if any I/O-Error occurs.
	 */
	public int yylex() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;

		int [] zzTransL = ZZ_TRANS;
		int [] zzRowMapL = ZZ_ROWMAP;
		int [] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar+= zzMarkedPosL-zzStartRead;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead  ;
				 zzCurrentPosL < zzMarkedPosL ;
			zzCurrentPosL += zzCharCount ) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
					case '\u000B':  // fall through
					case '\u000C':  // fall through
					case '\u0085':  // fall through
					case '\u2028':  // fall through
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is
				// (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek) yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ( (zzAttributes & 1) == 1 ) {
				zzAction = zzState;
			}


			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					}
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos  = zzCurrentPosL;
						zzMarkedPos   = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL  = zzCurrentPos;
						zzMarkedPosL   = zzMarkedPos;
						zzBufferL      = zzBuffer;
						zzEndReadL     = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ( (zzAttributes & 1) == 1 ) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ( (zzAttributes & 8) == 8 ) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				{
					return EOF;
				}
			}
			else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1:
						{ return ERROR;
						}
						// fall through
					case 33: break;
					case 2:
						{ return WHITE_CHAR;
						}
						// fall through
					case 34: break;
					case 3:
						{ return NEW_LINE;
						}
						// fall through
					case 35: break;
					case 4:
						{ return OPERATOR;
						}
						// fall through
					case 36: break;
					case 5:
						{ yybegin(STRING); return STRING_LITERAL;
						}
						// fall through
					case 37: break;
					case 6:
						{ return IDENTIFIER;
						}
						// fall through
					case 38: break;
					case 7:
						{ yybegin(CHARLITERAL);return CHARACTER_LITERAL;
						}
						// fall through
					case 39: break;
					case 8:
						{ return LPAREN;
						}
						// fall through
					case 40: break;
					case 9:
						{ return RPAREN;
						}
						// fall through
					case 41: break;
					case 10:
						{ return COMMA;
						}
						// fall through
					case 42: break;
					case 11:
						{ return DOT;
						}
						// fall through
					case 43: break;
					case 12:
						{ return INTEGER_LITERAL;
						}
						// fall through
					case 44: break;
					case 13:
						{ return SEMICOLON;
						}
						// fall through
					case 45: break;
					case 14:
						{ return LBRACK;
						}
						// fall through
					case 46: break;
					case 15:
						{ return RBRACK;
						}
						// fall through
					case 47: break;
					case 16:
						{ return LBRACE;
						}
						// fall through
					case 48: break;
					case 17:
						{ return RBRACE;
						}
						// fall through
					case 49: break;
					case 18:
						{ return STRING_LITERAL;
						}
						// fall through
					case 50: break;
					case 19:
						{ yybegin(YYINITIAL);return NEW_LINE;
						}
						// fall through
					case 51: break;
					case 20:
						{ yybegin(YYINITIAL);return STRING_LITERAL;
						}
						// fall through
					case 52: break;
					case 21:
						{ return CHARACTER_LITERAL;
						}
						// fall through
					case 53: break;
					case 22:
						{ yybegin(YYINITIAL);return CHARACTER_LITERAL;
						}
						// fall through
					case 54: break;
					case 23:
						{ return PRETREATMENT_LINE;
						}
						// fall through
					case 55: break;
					case 24:
						{ return DEFINE_LINE;
						}
						// fall through
					case 56: break;
					case 25:
						{ yybegin(DEFINE_NEW_LINE);return DEFINE_LINE;
						}
						// fall through
					case 57: break;
					case 26:
						{ yybegin(DEFINE);return DEFINE_LINE;
						}
						// fall through
					case 58: break;
					case 27:
						{ return FLOATING_POINT_LITERAL;
						}
						// fall through
					case 59: break;
					case 28:
						{ return COMMENT;
						}
						// fall through
					case 60: break;
					case 29:
						{ return KEYWORD;
						}
						// fall through
					case 61: break;
					case 30:
						{ { yybegin(DEFINE);return DEFINE_LINE; }
						}
						// fall through
					case 62: break;
					case 31:
						{ return TYPE;
						}
						// fall through
					case 63: break;
					case 32:
						{ yybegin(PRETREATMENT);return PRETREATMENT_LINE;
						}
						// fall through
					case 64: break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}

