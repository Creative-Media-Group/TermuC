// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: c.flex

package cn.rbc.codeeditor.lang.c;
import cn.rbc.codeeditor.util.*;


@SuppressWarnings("fallthrough")
public class CLexer implements Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int PRETREATMENT = 6;
  public static final int DEFINE = 8;
  public static final int DEFINE_NEW_LINE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\4\30\2\31\1\10\1\32\1\33\1\10"+
    "\1\33\1\10\1\6\1\34\1\35\1\36\1\37\1\40"+
    "\1\37\2\41\1\42\2\41\1\43\3\41\1\44\7\41"+
    "\1\45\2\41\1\46\1\47\1\50\1\10\1\51\1\6"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\41\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\41\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\10\1\103\1\10\6\0\1\104"+
    "\32\0\2\6\4\13\4\6\1\13\2\6\1\0\7\6"+
    "\1\13\4\6\1\13\5\6\27\13\1\6\37\13\1\6"+
    "\u01ca\13\4\6\14\13\16\6\5\13\7\6\1\13\1\6"+
    "\1\13\21\6\160\0\5\13\1\6\2\13\2\6\4\13"+
    "\1\6\1\13\6\6\1\13\1\6\3\13\1\6\1\13"+
    "\1\6\24\13\1\6\123\13\1\6\213\13\1\6\5\0"+
    "\2\6\246\13\1\6\46\13\2\6\1\13\6\6\51\13"+
    "\6\6\1\13\1\6\55\0\1\6\1\0\1\6\2\0"+
    "\1\6\2\0\1\6\1\0\10\6\33\13\4\6\4\13"+
    "\15\6\6\0\5\6\1\13\4\6\13\0\1\6\1\0"+
    "\3\6\53\13\37\0\4\6\2\13\1\0\143\13\1\6"+
    "\1\13\10\0\1\6\6\0\2\13\2\0\1\6\4\0"+
    "\2\13\12\0\3\13\2\6\1\13\17\6\1\0\1\13"+
    "\1\0\36\13\33\0\2\6\131\13\13\0\1\13\16\6"+
    "\12\0\41\13\11\0\2\13\4\6\1\13\2\6\1\0"+
    "\30\13\4\0\1\13\11\0\1\13\3\0\1\13\5\0"+
    "\22\6\31\13\3\0\4\6\13\13\65\6\25\13\1\6"+
    "\22\13\13\6\61\0\66\13\3\0\1\13\22\0\1\13"+
    "\7\0\12\13\2\0\2\6\12\0\1\6\20\13\3\0"+
    "\1\6\10\13\2\6\2\13\2\6\26\13\1\6\7\13"+
    "\1\6\1\13\3\6\4\13\2\6\1\0\1\13\7\0"+
    "\2\6\2\0\2\6\3\0\1\13\10\6\1\0\4\6"+
    "\2\13\1\6\3\13\2\0\2\6\12\0\4\13\7\6"+
    "\2\13\1\6\1\0\2\6\3\0\1\6\6\13\4\6"+
    "\2\13\2\6\26\13\1\6\7\13\1\6\2\13\1\6"+
    "\2\13\1\6\2\13\2\6\1\0\1\6\5\0\4\6"+
    "\2\0\2\6\3\0\3\6\1\0\7\6\4\13\1\6"+
    "\1\13\7\6\14\0\3\13\1\0\13\6\3\0\1\6"+
    "\11\13\1\6\3\13\1\6\26\13\1\6\7\13\1\6"+
    "\2\13\1\6\5\13\2\6\1\0\1\13\10\0\1\6"+
    "\3\0\1\6\3\0\2\6\1\13\17\6\2\13\2\0"+
    "\2\6\12\0\1\6\1\13\7\6\1\13\6\0\1\6"+
    "\3\0\1\6\10\13\2\6\2\13\2\6\26\13\1\6"+
    "\7\13\1\6\2\13\1\6\5\13\2\6\1\0\1\13"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\3\0\4\6"+
    "\2\13\1\6\3\13\2\0\2\6\12\0\1\6\1\13"+
    "\20\6\1\0\1\13\1\6\6\13\3\6\3\13\1\6"+
    "\4\13\3\6\2\13\1\6\1\13\1\6\2\13\3\6"+
    "\2\13\3\6\3\13\3\6\14\13\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\13\6\6\1\0\16\6"+
    "\12\0\11\6\1\13\6\6\5\0\10\13\1\6\3\13"+
    "\1\6\27\13\1\6\20\13\3\6\1\13\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\1\6\3\13\5\6"+
    "\2\13\2\0\2\6\12\0\20\6\1\13\3\0\1\6"+
    "\10\13\1\6\3\13\1\6\27\13\1\6\12\13\1\6"+
    "\5\13\2\6\1\0\1\13\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\7\6\1\13\1\6\2\13\2\0"+
    "\2\6\12\0\1\6\2\13\15\6\4\0\11\13\1\6"+
    "\3\13\1\6\51\13\2\0\1\13\7\0\1\6\3\0"+
    "\1\6\4\0\1\13\5\6\3\13\1\0\7\6\3\13"+
    "\2\0\2\6\12\0\12\6\6\13\1\6\3\0\1\6"+
    "\22\13\3\6\30\13\1\6\11\13\1\6\1\13\2\6"+
    "\7\13\3\6\1\0\4\6\6\0\1\6\1\0\1\6"+
    "\10\0\6\6\12\0\2\6\2\0\15\6\60\13\1\0"+
    "\2\13\7\0\4\6\10\13\10\0\1\6\12\0\47\6"+
    "\2\13\1\6\1\13\1\6\5\13\1\6\30\13\1\6"+
    "\1\13\1\6\12\13\1\0\2\13\11\0\1\13\2\6"+
    "\5\13\1\6\1\13\1\6\6\0\2\6\12\0\2\6"+
    "\4\13\40\6\1\13\27\6\2\0\6\6\12\0\13\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\2\0\10\13"+
    "\1\6\44\13\4\6\24\0\1\6\2\0\5\13\13\0"+
    "\1\6\44\0\11\6\1\0\71\6\53\13\24\0\1\13"+
    "\12\0\6\6\6\13\4\0\4\13\3\0\1\13\3\0"+
    "\2\13\7\0\3\13\4\0\15\13\14\0\1\13\17\0"+
    "\2\6\46\13\1\6\1\13\5\6\1\13\2\6\53\13"+
    "\1\6\115\13\1\6\4\13\2\6\7\13\1\6\1\13"+
    "\1\6\4\13\2\6\51\13\1\6\4\13\2\6\41\13"+
    "\1\6\4\13\2\6\7\13\1\6\1\13\1\6\4\13"+
    "\2\6\17\13\1\6\71\13\1\6\4\13\2\6\103\13"+
    "\2\6\3\0\40\6\20\13\20\6\126\13\2\6\6\13"+
    "\3\6\u016c\13\2\6\21\13\1\6\32\13\5\6\113\13"+
    "\3\6\13\13\7\6\15\13\1\6\4\13\3\0\13\6"+
    "\22\13\3\0\13\6\22\13\2\0\14\6\15\13\1\6"+
    "\3\13\1\6\2\0\14\6\64\13\40\0\3\6\1\13"+
    "\3\6\2\13\1\0\2\6\12\0\41\6\4\0\1\6"+
    "\12\0\6\6\131\13\7\6\5\13\2\0\42\13\1\0"+
    "\1\13\5\6\106\13\12\6\37\13\1\6\14\0\4\6"+
    "\14\0\12\6\12\0\36\13\2\6\5\13\13\6\54\13"+
    "\4\6\32\13\6\6\12\0\46\6\27\13\5\0\4\6"+
    "\65\13\12\0\1\6\35\0\2\6\13\0\6\6\12\0"+
    "\15\6\1\13\10\6\16\0\1\6\2\0\77\6\5\0"+
    "\57\13\21\0\7\13\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\13\15\0\2\13\12\0\54\13\16\0\14\6"+
    "\44\13\24\0\10\6\12\0\3\6\3\13\12\0\44\13"+
    "\2\6\11\13\7\6\53\13\2\6\3\13\20\6\3\0"+
    "\1\6\25\0\4\13\1\0\6\13\1\0\2\13\3\0"+
    "\1\13\5\6\300\13\72\0\1\6\5\0\26\13\2\6"+
    "\6\13\2\6\46\13\2\6\6\13\2\6\10\13\1\6"+
    "\1\13\1\6\1\13\1\6\1\13\1\6\37\13\2\6"+
    "\65\13\1\6\7\13\1\6\1\13\3\6\3\13\1\6"+
    "\7\13\3\6\4\13\2\6\6\13\4\6\15\13\5\6"+
    "\3\13\1\6\7\13\16\6\5\0\30\6\2\3\5\0"+
    "\20\6\2\13\23\6\1\13\13\6\5\0\1\6\12\0"+
    "\1\6\1\13\15\6\1\13\20\6\15\13\3\6\40\13"+
    "\20\6\15\0\4\6\1\0\3\6\14\0\21\6\1\13"+
    "\4\6\1\13\2\6\12\13\1\6\1\13\3\6\5\13"+
    "\6\6\1\13\1\6\1\13\1\6\1\13\1\6\4\13"+
    "\1\6\13\13\2\6\4\13\5\6\5\13\4\6\1\13"+
    "\21\6\51\13\u0177\6\57\13\1\6\57\13\1\6\205\13"+
    "\6\6\4\13\3\0\2\13\14\6\46\13\1\6\1\13"+
    "\5\6\1\13\2\6\70\13\7\6\1\13\17\6\1\0"+
    "\27\13\11\6\7\13\1\6\7\13\1\6\7\13\1\6"+
    "\7\13\1\6\7\13\1\6\7\13\1\6\7\13\1\6"+
    "\7\13\1\6\40\0\57\6\1\13\325\6\3\13\31\6"+
    "\11\13\6\0\1\6\5\13\2\6\5\13\4\6\126\13"+
    "\2\6\2\0\2\6\3\13\1\6\132\13\1\6\4\13"+
    "\5\6\53\13\1\6\136\13\21\6\40\13\60\6\320\13"+
    "\100\6\375\13\3\6\215\13\103\6\56\13\2\6\15\13"+
    "\3\6\20\13\12\0\2\13\24\6\57\13\1\0\4\6"+
    "\12\0\1\6\37\13\2\0\120\13\2\0\45\6\11\13"+
    "\2\6\147\13\2\6\65\13\2\6\11\13\52\6\15\13"+
    "\1\0\3\13\1\0\4\13\1\0\27\13\5\0\4\6"+
    "\1\0\13\6\1\13\7\6\64\13\14\6\2\0\62\13"+
    "\22\0\12\6\12\0\6\6\22\0\6\13\3\6\1\13"+
    "\1\6\2\13\13\0\34\13\10\0\2\6\27\13\15\0"+
    "\14\6\35\13\3\6\4\0\57\13\16\0\16\6\1\13"+
    "\12\0\6\6\5\13\1\0\12\13\12\0\5\13\1\6"+
    "\51\13\16\0\11\6\3\13\1\0\10\13\2\0\2\6"+
    "\12\0\6\6\27\13\3\6\1\13\3\0\62\13\1\0"+
    "\1\13\3\0\2\13\2\0\5\13\2\0\1\13\1\0"+
    "\1\13\30\6\3\13\2\6\13\13\5\0\2\6\3\13"+
    "\2\0\12\6\6\13\2\6\6\13\2\6\6\13\11\6"+
    "\7\13\1\6\7\13\1\6\53\13\1\6\16\13\6\6"+
    "\163\13\10\0\1\6\2\0\2\6\12\0\6\6\244\13"+
    "\14\6\27\13\4\6\61\13\4\6\u0100\3\156\13\2\6"+
    "\152\13\46\6\7\13\14\6\5\13\5\6\1\13\1\0"+
    "\12\13\1\6\15\13\1\6\5\13\1\6\1\13\1\6"+
    "\2\13\1\6\2\13\1\6\154\13\41\6\153\13\22\6"+
    "\100\13\2\6\66\13\50\6\15\13\3\6\20\0\20\6"+
    "\20\0\3\6\2\13\30\6\3\13\31\6\1\13\6\6"+
    "\5\13\1\6\207\13\2\6\1\0\4\6\1\13\13\6"+
    "\12\0\7\6\32\13\4\6\1\13\1\6\32\13\13\6"+
    "\131\13\3\6\6\13\2\6\6\13\2\6\6\13\2\6"+
    "\3\13\3\6\2\13\3\6\2\13\22\6\3\0\4\6"+
    "\14\13\1\6\32\13\1\6\23\13\1\6\2\13\1\6"+
    "\17\13\2\6\16\13\42\6\173\13\105\6\65\13\210\6"+
    "\1\0\202\6\35\13\3\6\61\13\17\6\1\0\37\6"+
    "\40\13\15\6\36\13\5\6\46\13\5\0\5\6\36\13"+
    "\2\6\44\13\4\6\10\13\1\6\5\13\52\6\236\13"+
    "\2\6\12\0\6\6\44\13\4\6\44\13\4\6\50\13"+
    "\10\6\64\13\234\6\67\13\11\6\26\13\12\6\10\13"+
    "\230\6\6\13\2\6\1\13\1\6\54\13\1\6\2\13"+
    "\3\6\1\13\2\6\27\13\12\6\27\13\11\6\37\13"+
    "\101\6\23\13\1\6\2\13\12\6\26\13\12\6\32\13"+
    "\106\6\70\13\6\6\2\13\100\6\1\13\3\0\1\6"+
    "\2\0\5\6\4\0\4\13\1\6\3\13\1\6\35\13"+
    "\2\6\3\0\4\6\1\0\40\6\35\13\3\6\35\13"+
    "\43\6\10\13\1\6\34\13\2\0\31\6\66\13\12\6"+
    "\26\13\12\6\23\13\15\6\22\13\156\6\111\13\67\6"+
    "\63\13\15\6\63\13\15\6\44\13\4\0\10\6\12\0"+
    "\u0146\6\52\13\1\6\2\0\3\6\2\13\116\6\35\13"+
    "\12\6\1\13\10\6\26\13\13\0\137\6\25\13\33\6"+
    "\27\13\11\6\3\0\65\13\17\0\37\6\12\0\17\6"+
    "\4\0\55\13\13\0\2\6\1\0\17\6\1\0\2\6"+
    "\31\13\7\6\12\0\6\6\3\0\44\13\16\0\1\6"+
    "\12\0\4\6\1\13\2\0\1\13\10\6\43\13\1\0"+
    "\2\6\1\13\11\6\3\0\60\13\16\0\4\13\4\6"+
    "\4\0\1\6\14\0\1\13\1\6\1\13\43\6\22\13"+
    "\1\6\31\13\14\0\6\6\1\0\101\6\7\13\1\6"+
    "\1\13\1\6\4\13\1\6\17\13\1\6\12\13\7\6"+
    "\57\13\14\0\5\6\12\0\6\6\4\0\1\6\10\13"+
    "\2\6\2\13\2\6\26\13\1\6\7\13\1\6\2\13"+
    "\1\6\5\13\1\6\2\0\1\13\7\0\2\6\2\0"+
    "\2\6\3\0\2\6\1\13\6\6\1\0\5\6\5\13"+
    "\2\0\2\6\7\0\3\6\5\0\213\6\65\13\22\0"+
    "\4\13\5\6\12\0\4\6\1\0\3\13\36\6\60\13"+
    "\24\0\2\13\1\6\1\13\10\6\12\0\246\6\57\13"+
    "\7\0\2\6\11\0\27\6\4\13\2\0\42\6\60\13"+
    "\21\0\3\6\1\13\13\6\12\0\46\6\53\13\15\0"+
    "\1\13\7\6\12\0\66\6\33\13\2\6\17\0\4\6"+
    "\12\0\306\6\54\13\17\0\145\6\100\13\12\0\25\6"+
    "\10\13\2\6\1\13\2\6\10\13\1\6\2\13\1\6"+
    "\30\13\6\0\1\6\2\0\2\6\4\0\1\13\1\0"+
    "\1\13\2\0\14\6\12\0\106\6\10\13\2\6\47\13"+
    "\7\0\2\6\7\0\1\13\1\6\1\13\1\0\33\6"+
    "\1\13\12\0\50\13\7\0\1\13\4\0\10\6\1\0"+
    "\10\6\1\13\13\0\56\13\20\0\3\6\1\13\42\6"+
    "\71\13\7\6\11\13\1\6\45\13\10\0\1\6\10\0"+
    "\1\13\17\6\12\0\30\6\36\13\2\6\26\0\1\6"+
    "\16\0\111\6\7\13\1\6\2\13\1\6\46\13\6\0"+
    "\3\6\1\0\1\6\2\0\1\6\7\0\1\13\1\0"+
    "\10\6\12\0\6\6\6\13\1\6\2\13\1\6\40\13"+
    "\5\0\1\6\2\0\1\6\5\0\1\13\7\6\12\0"+
    "\u0136\6\23\13\4\0\271\6\1\13\54\6\4\13\37\6"+
    "\232\13\146\6\157\13\21\6\304\13\274\6\57\13\1\6"+
    "\11\0\307\6\107\13\271\6\71\13\7\6\37\13\1\6"+
    "\12\0\146\6\36\13\2\6\5\0\13\6\60\13\7\0"+
    "\11\6\4\13\14\6\12\0\11\6\25\13\5\6\23\13"+
    "\260\6\100\13\200\6\113\13\4\6\1\0\1\13\67\0"+
    "\7\6\4\0\15\13\100\6\2\13\1\6\1\13\1\0"+
    "\13\6\2\0\16\6\370\13\10\6\326\13\52\6\11\13"+
    "\367\6\37\13\61\6\3\13\21\6\4\13\10\6\u018c\13"+
    "\4\6\153\13\5\6\15\13\3\6\11\13\7\6\12\13"+
    "\3\6\2\0\1\6\4\0\301\6\5\0\3\6\26\0"+
    "\2\6\7\0\36\6\4\0\224\6\3\0\273\6\125\13"+
    "\1\6\107\13\1\6\2\13\2\6\1\13\2\6\2\13"+
    "\2\6\4\13\1\6\14\13\1\6\1\13\1\6\7\13"+
    "\1\6\101\13\1\6\4\13\2\6\10\13\1\6\7\13"+
    "\1\6\34\13\1\6\4\13\1\6\5\13\1\6\1\13"+
    "\3\6\7\13\1\6\u0154\13\2\6\31\13\1\6\31\13"+
    "\1\6\37\13\1\6\31\13\1\6\37\13\1\6\31\13"+
    "\1\6\37\13\1\6\31\13\1\6\37\13\1\6\31\13"+
    "\1\6\10\13\2\6\151\0\4\6\62\0\10\6\1\0"+
    "\16\6\1\0\26\6\5\0\1\6\17\0\120\6\7\0"+
    "\1\6\21\0\2\6\7\0\1\6\2\0\1\6\5\0"+
    "\325\6\55\13\3\6\7\0\7\13\2\6\12\0\4\6"+
    "\1\13\u0171\6\54\13\16\0\5\6\306\13\13\6\7\0"+
    "\51\6\104\13\7\0\1\13\4\6\12\0\u0156\6\1\13"+
    "\117\6\4\13\1\6\33\13\1\6\2\13\1\6\1\13"+
    "\2\6\1\13\1\6\12\13\1\6\4\13\1\6\1\13"+
    "\1\6\1\13\6\6\1\13\4\6\1\13\1\6\1\13"+
    "\1\6\1\13\1\6\3\13\1\6\2\13\1\6\1\13"+
    "\2\6\1\13\1\6\1\13\1\6\1\13\1\6\1\13"+
    "\1\6\1\13\1\6\2\13\1\6\1\13\2\6\4\13"+
    "\1\6\7\13\1\6\4\13\1\6\4\13\1\6\1\13"+
    "\1\6\12\13\1\6\21\13\5\6\3\13\1\6\5\13"+
    "\1\6\21\13\u0134\6\12\0\6\6\336\13\42\6\65\13"+
    "\13\6\336\13\2\6\u0182\13\16\6\u0131\13\37\6\36\13"+
    "\342\6\113\13\266\6\1\0\36\6\140\0\200\6\360\0"+
    "\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\4\2\14\1\15"+
    "\1\16\1\17\20\6\1\20\1\21\1\22\2\23\1\24"+
    "\1\1\1\25\1\26\1\1\2\27\2\30\1\31\2\32"+
    "\7\0\1\33\1\0\1\34\4\14\2\33\1\0\1\14"+
    "\1\0\11\6\1\35\5\6\1\35\13\6\1\22\1\0"+
    "\1\36\4\0\1\37\6\0\2\34\2\14\1\0\1\33"+
    "\2\14\16\6\1\40\17\6\2\0\2\36\11\0\3\14"+
    "\23\6\2\0\1\41\4\0\3\14\11\6\1\0\1\37"+
    "\2\0\3\14\4\6\3\14\2\6\3\14\1\6\3\14"+
    "\1\6\5\14\1\0\2\14\1\0\2\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\1\0\1\14\1\33\1\0"+
    "\1\33\1\0\4\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u019e"+
    "\0\u019e\0\u01e3\0\u019e\0\u019e\0\u0228\0\u026d\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u019e\0\u019e"+
    "\0\u019e\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\u07d1\0\u019e\0\u019e\0\u0816\0\u019e\0\u085b\0\u019e\0\u08a0"+
    "\0\u019e\0\u019e\0\u08e5\0\u019e\0\u092a\0\u019e\0\u092a\0\u019e"+
    "\0\u019e\0\u096f\0\u0228\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8"+
    "\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0"+
    "\0\u0d35\0\u019e\0\u0d7a\0\u019e\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e"+
    "\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u026d\0\u120f\0\u1254\0\u1299"+
    "\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1"+
    "\0\u019e\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u019e\0\u1887"+
    "\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf"+
    "\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u026d\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2"+
    "\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u019e\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d"+
    "\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u019e\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48"+
    "\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70"+
    "\0\u2fb5\0\u2ffa\0\u303f\0\u019e\0\u3084\0\u30c9\0\u310e\0\u3153"+
    "\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b"+
    "\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3"+
    "\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb"+
    "\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3"+
    "\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b"+
    "\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\7\1\10\1\12\1\7\1\10"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\2\13"+
    "\1\22\1\13\1\23\1\24\1\25\4\26\1\27\1\13"+
    "\12\16\1\30\1\7\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\16\1\42\1\16\1\43"+
    "\4\16\1\44\1\45\1\46\1\47\1\50\1\51\3\16"+
    "\1\52\1\53\1\7\2\54\1\55\2\54\1\56\3\54"+
    "\1\57\35\54\1\60\35\54\2\61\1\55\2\61\1\56"+
    "\6\61\1\62\32\61\1\63\35\61\1\7\1\64\1\55"+
    "\1\7\1\64\1\56\1\7\1\64\1\7\1\64\10\7"+
    "\2\64\1\65\5\64\1\7\13\64\3\7\31\64\4\7"+
    "\1\66\1\55\1\7\1\66\1\56\1\7\2\66\4\7"+
    "\7\66\1\67\22\66\1\70\34\66\2\7\1\66\1\71"+
    "\1\7\1\66\1\72\1\7\1\66\75\7\107\0\1\11"+
    "\111\0\1\73\45\0\1\74\1\75\3\0\1\76\1\0"+
    "\1\77\3\0\1\100\3\0\1\101\10\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\31\16\2\0"+
    "\1\16\25\0\5\102\72\0\1\103\4\0\1\104\103\0"+
    "\1\102\1\0\1\105\1\106\1\107\1\110\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\1\115\7\0\1\112"+
    "\1\113\1\112\4\0\1\114\3\0\1\113\6\0\1\115"+
    "\30\0\1\102\1\0\5\26\5\0\1\112\1\113\2\0"+
    "\1\114\1\113\10\0\1\112\1\113\1\112\4\0\1\114"+
    "\3\0\1\113\14\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\1\16\1\116\1\117\3\16\1\120\3\16\3\0"+
    "\31\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\23\16\1\121\5\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\20\16\1\122"+
    "\10\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\1\16\1\123\6\16\1\124\5\16\1\125"+
    "\12\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\5\16\1\126\10\16\1\127\12\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\13\16\1\130\1\16\1\131\10\16\1\132\2\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\13\16\1\133\2\16\1\134\12\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\16\16\1\121"+
    "\12\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\6\16\1\135\6\16\1\136\13\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\16\16\1\137\12\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\5\16\1\140\23\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\10\16\1\141\1\142\10\16\1\143\2\16\1\144\3\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\27\16\1\145\1\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\15\16\1\146\13\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\16\16\1\147\12\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\10\16\1\150\20\16"+
    "\2\0\1\16\2\54\1\0\2\54\1\0\3\54\1\0"+
    "\35\54\1\0\35\54\2\0\1\55\102\0\2\151\4\0"+
    "\76\151\1\0\2\61\4\0\76\61\20\0\1\152\4\0"+
    "\1\153\62\0\1\71\160\0\1\154\112\0\1\155\1\0"+
    "\1\156\2\0\1\157\72\0\1\160\6\0\1\161\100\0"+
    "\1\162\113\0\1\163\101\0\1\164\43\0\5\102\5\0"+
    "\1\112\1\113\3\0\1\113\10\0\1\112\1\113\1\112"+
    "\10\0\1\113\14\0\17\165\1\166\65\165\2\104\1\167"+
    "\2\104\1\170\77\104\23\0\1\102\1\0\1\105\1\106"+
    "\1\107\1\110\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\110\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\37\0\1\102\1\0\4\171"+
    "\1\111\5\0\1\112\1\113\2\0\1\114\1\113\10\0"+
    "\1\112\1\113\1\112\4\0\1\114\3\0\1\113\37\0"+
    "\1\102\1\0\4\172\1\111\5\0\1\112\1\113\2\0"+
    "\1\114\1\113\10\0\1\112\1\113\1\112\4\0\1\114"+
    "\3\0\1\113\37\0\1\102\1\0\5\111\5\0\1\112"+
    "\1\113\3\0\1\113\10\0\1\112\1\113\1\112\10\0"+
    "\1\113\34\0\1\173\1\0\1\173\2\0\5\174\100\0"+
    "\1\175\4\176\2\0\5\176\11\0\6\176\25\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\16\16"+
    "\1\177\12\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\16\16\1\200\12\16\2\0\2\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\14\16"+
    "\1\201\14\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\22\16\1\202\6\16\2\0\2\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\5\16"+
    "\1\203\23\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\21\16\1\204\1\205\6\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\1\16\1\206\27\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\15\16\1\207\13\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\6\16\1\210\22\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\23\16\1\211\5\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\21\16\1\204\7\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\23\16\1\212\5\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\22\16\1\213\6\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\16\16\1\214\12\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\20\16\1\135\10\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\22\16\1\215\6\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\15\16\1\216\13\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\7\16\1\217\12\16\1\220"+
    "\6\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\16\16\1\221\12\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\7\16\1\222"+
    "\20\16\1\223\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\1\16\1\224\16\16\1\225\10\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\11\16\1\226\17\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\17\16\1\227\11\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\11\16\1\230\7\16\1\231\7\16\2\0\2\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\11\16"+
    "\1\232\1\16\1\233\15\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\11\16\1\234\17\16"+
    "\2\0\1\16\17\235\1\236\65\235\2\153\1\237\2\153"+
    "\1\240\77\153\57\0\1\241\107\0\1\242\7\0\1\243"+
    "\67\0\1\244\120\0\1\245\70\0\1\246\10\0\1\164"+
    "\72\0\1\247\116\0\1\243\70\0\1\250\107\0\1\246"+
    "\27\0\17\165\1\251\65\165\17\0\1\166\4\0\1\167"+
    "\62\0\1\167\125\0\1\102\1\0\4\252\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\37\0\1\102\1\0"+
    "\4\253\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\41\0\5\174\100\0\5\174\5\0\1\112\15\0\1\112"+
    "\1\0\1\112\52\0\1\175\4\176\2\0\5\176\2\0"+
    "\1\114\6\0\6\176\4\0\1\114\45\0\5\254\2\0"+
    "\5\254\2\0\1\114\6\0\6\254\4\0\1\114\20\0"+
    "\1\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\16\16\1\255\12\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\14\16\1\256\14\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\1\16\1\257\27\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\16\16\1\135\12\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\1\16\1\260\27\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\5\16\1\135\23\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\3\16\1\261\25\16\2\0\2\16\12\0\1\16\11\0"+
    "\5\16\2\0\12\16\3\0\20\16\1\215\10\16\2\0"+
    "\2\16\12\0\1\16\11\0\5\16\2\0\12\16\3\0"+
    "\21\16\1\262\1\263\6\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\1\16\1\264\27\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\2\16\1\265\26\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\14\16\1\135\14\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\5\16\1\266\23\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\1\16\1\136\27\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\7\16\1\215\21\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\11\16\1\267\17\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\23\16\1\266\5\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\20\16\1\136\10\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\15\16\1\270\13\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\5\16\1\271\23\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\22\16\1\272\6\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\23\16\1\273\5\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\22\16\1\205\6\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\5\16\1\274\23\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\16\16\1\275\12\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\11\16\1\276\17\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\4\16\1\215\24\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\1\16\1\277\27\16"+
    "\2\0\2\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\13\16\1\204\15\16\2\0\1\16\17\235\1\300"+
    "\65\235\17\0\1\236\4\0\1\237\62\0\1\237\164\0"+
    "\1\301\101\0\1\302\103\0\1\302\110\0\1\242\111\0"+
    "\1\303\73\0\1\304\112\0\1\305\100\0\1\306\24\0"+
    "\17\165\1\251\4\165\1\167\60\165\23\0\1\102\1\0"+
    "\4\307\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\37\0\1\102\1\0\4\310\1\111\5\0\1\112\1\113"+
    "\2\0\1\114\1\113\10\0\1\112\1\113\1\112\4\0"+
    "\1\114\3\0\1\113\41\0\5\311\2\0\5\311\2\0"+
    "\1\114\6\0\6\311\4\0\1\114\20\0\1\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\13\16\1\215"+
    "\15\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\17\16\1\312\11\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\7\16\1\313"+
    "\21\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\12\16\1\135\16\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\10\16\1\135"+
    "\20\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\22\16\1\135\6\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\11\16\1\314"+
    "\17\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\23\16\1\315\5\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\13\16\1\316"+
    "\15\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\20\16\1\275\10\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\21\16\1\317"+
    "\7\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\5\16\1\232\23\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\16\16\1\320"+
    "\12\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\11\16\1\321\17\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\3\16\1\262"+
    "\25\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\4\16\1\322\24\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\15\16\1\135"+
    "\13\16\2\0\2\16\12\0\1\16\11\0\5\16\2\0"+
    "\12\16\3\0\7\16\1\222\21\16\2\0\2\16\12\0"+
    "\1\16\11\0\5\16\2\0\12\16\3\0\22\16\1\150"+
    "\6\16\2\0\1\16\17\235\1\300\4\235\1\237\60\235"+
    "\66\0\1\323\107\0\1\302\72\0\1\324\121\0\1\325"+
    "\75\0\1\326\42\0\1\102\1\0\4\327\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\37\0\1\102\1\0"+
    "\4\330\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\41\0\5\331\2\0\5\331\2\0\1\114\6\0\6\331"+
    "\4\0\1\114\20\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\13\16\1\332\15\16\2\0\2\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\11\16"+
    "\1\333\17\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\15\16\1\334\13\16\2\0\2\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\13\16"+
    "\1\262\15\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\5\16\1\215\23\16\2\0\2\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\22\16"+
    "\1\335\6\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\6\16\1\135\22\16\2\0\2\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\3\16"+
    "\1\135\25\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\5\16\1\320\23\16\2\0\1\16"+
    "\56\0\1\324\103\0\1\243\101\0\1\302\55\0\1\102"+
    "\1\0\4\336\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\337\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\5\340\2\0\5\340"+
    "\2\0\1\114\6\0\6\340\4\0\1\114\20\0\1\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\5\16"+
    "\1\341\23\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\15\16\1\342\13\16\2\0\2\16"+
    "\12\0\1\16\11\0\5\16\2\0\12\16\3\0\23\16"+
    "\1\204\5\16\2\0\2\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\5\16\1\134\23\16\2\0\1\16"+
    "\23\0\1\102\1\0\4\343\1\111\5\0\1\112\1\113"+
    "\2\0\1\114\1\113\10\0\1\112\1\113\1\112\4\0"+
    "\1\114\3\0\1\113\37\0\1\102\1\0\4\344\1\111"+
    "\5\0\1\112\1\113\2\0\1\114\1\113\10\0\1\112"+
    "\1\113\1\112\4\0\1\114\3\0\1\113\41\0\5\345"+
    "\2\0\5\345\2\0\1\114\6\0\6\345\4\0\1\114"+
    "\20\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\26\16\1\215\2\16\2\0\2\16\12\0\1\16"+
    "\11\0\5\16\2\0\12\16\3\0\1\16\1\346\27\16"+
    "\2\0\1\16\23\0\1\102\1\0\4\347\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\37\0\1\102\1\0"+
    "\4\350\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\41\0\5\351\2\0\5\351\2\0\1\114\6\0\6\351"+
    "\4\0\1\114\20\0\1\16\12\0\1\16\11\0\5\16"+
    "\2\0\12\16\3\0\20\16\1\352\10\16\2\0\1\16"+
    "\23\0\1\102\1\0\4\353\1\111\5\0\1\112\1\113"+
    "\2\0\1\114\1\113\10\0\1\112\1\113\1\112\4\0"+
    "\1\114\3\0\1\113\37\0\1\102\1\0\4\354\1\111"+
    "\5\0\1\112\1\113\2\0\1\114\1\113\10\0\1\112"+
    "\1\113\1\112\4\0\1\114\3\0\1\113\41\0\5\355"+
    "\2\0\5\355\2\0\1\114\6\0\6\355\4\0\1\114"+
    "\20\0\1\16\12\0\1\16\11\0\5\16\2\0\12\16"+
    "\3\0\27\16\1\215\1\16\2\0\1\16\23\0\1\102"+
    "\1\0\4\356\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\357\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\5\360\2\0\5\360"+
    "\2\0\1\114\6\0\6\360\4\0\1\114\43\0\1\102"+
    "\1\0\4\361\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\362\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\5\363\2\0\5\363"+
    "\2\0\1\114\6\0\6\363\4\0\1\114\43\0\1\102"+
    "\1\0\4\364\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\365\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\5\366\2\0\5\366"+
    "\2\0\1\114\6\0\6\366\4\0\1\114\43\0\1\102"+
    "\1\0\4\367\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\370\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\5\371\2\0\5\371"+
    "\2\0\1\114\6\0\6\371\4\0\1\114\43\0\1\102"+
    "\1\0\4\372\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\373\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\5\374\2\0\5\374"+
    "\2\0\1\114\6\0\6\374\4\0\1\114\43\0\1\102"+
    "\1\0\4\375\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\376\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\5\377\2\0\5\377"+
    "\2\0\1\114\6\0\6\377\4\0\1\114\43\0\1\102"+
    "\1\0\4\u0100\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\37\0\1\102\1\0\4\u0101\1\111\5\0\1\112"+
    "\1\113\2\0\1\114\1\113\10\0\1\112\1\113\1\112"+
    "\4\0\1\114\3\0\1\113\41\0\5\u0102\2\0\5\u0102"+
    "\2\0\1\114\6\0\6\u0102\4\0\1\114\43\0\1\102"+
    "\1\0\4\u0103\1\111\5\0\1\112\1\113\2\0\1\114"+
    "\1\113\10\0\1\112\1\113\1\112\4\0\1\114\3\0"+
    "\1\113\41\0\5\u0104\2\0\5\u0104\2\0\1\114\6\0"+
    "\6\u0104\4\0\1\114\43\0\1\102\1\0\4\u0105\1\111"+
    "\5\0\1\112\1\113\2\0\1\114\1\113\10\0\1\112"+
    "\1\113\1\112\4\0\1\114\3\0\1\113\57\0\1\114"+
    "\20\0\1\114\43\0\1\102\1\0\4\u0106\1\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\37\0\1\102\1\0"+
    "\4\u0107\1\111\5\0\1\112\1\113\2\0\1\114\1\113"+
    "\10\0\1\112\1\113\1\112\4\0\1\114\3\0\1\113"+
    "\37\0\1\102\1\0\4\u0108\1\111\5\0\1\112\1\113"+
    "\2\0\1\114\1\113\10\0\1\112\1\113\1\112\4\0"+
    "\1\114\3\0\1\113\37\0\1\102\1\0\5\111\5\0"+
    "\1\112\1\113\2\0\1\114\1\113\10\0\1\112\1\113"+
    "\1\112\4\0\1\114\3\0\1\113\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15939];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\3\11\1\1\2\11\2\1\4\11\4\1\3\11"+
    "\20\1\2\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\1\1\7\0"+
    "\1\1\1\0\6\1\1\11\1\0\1\11\1\0\33\1"+
    "\1\11\1\0\1\1\4\0\1\1\6\0\1\11\3\1"+
    "\1\0\41\1\2\0\1\11\1\1\11\0\26\1\2\0"+
    "\1\11\4\0\14\1\1\0\1\11\2\0\31\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
          // fall through
          case 34: break;
          case 2:
            { return WHITE_CHAR;
            }
          // fall through
          case 35: break;
          case 3:
            { return NEW_LINE;
            }
          // fall through
          case 36: break;
          case 4:
            { return OPERATOR;
            }
          // fall through
          case 37: break;
          case 5:
            { yybegin(STRING); return STRING_LITERAL;
            }
          // fall through
          case 38: break;
          case 6:
            { return IDENTIFIER;
            }
          // fall through
          case 39: break;
          case 7:
            { yybegin(CHARLITERAL);return CHARACTER_LITERAL;
            }
          // fall through
          case 40: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 41: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 42: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 43: break;
          case 11:
            { return DOT;
            }
          // fall through
          case 44: break;
          case 12:
            { return INTEGER_LITERAL;
            }
          // fall through
          case 45: break;
          case 13:
            { return SEMICOLON;
            }
          // fall through
          case 46: break;
          case 14:
            { return LBRACK;
            }
          // fall through
          case 47: break;
          case 15:
            { return RBRACK;
            }
          // fall through
          case 48: break;
          case 16:
            { return LBRACE;
            }
          // fall through
          case 49: break;
          case 17:
            { return RBRACE;
            }
          // fall through
          case 50: break;
          case 18:
            { return STRING_LITERAL;
            }
          // fall through
          case 51: break;
          case 19:
            { yybegin(YYINITIAL);return NEW_LINE;
            }
          // fall through
          case 52: break;
          case 20:
            { yybegin(YYINITIAL);return STRING_LITERAL;
            }
          // fall through
          case 53: break;
          case 21:
            { return CHARACTER_LITERAL;
            }
          // fall through
          case 54: break;
          case 22:
            { yybegin(YYINITIAL);return CHARACTER_LITERAL;
            }
          // fall through
          case 55: break;
          case 23:
            { return PRETREATMENT_LINE;
            }
          // fall through
          case 56: break;
          case 24:
            { return DEFINE_LINE;
            }
          // fall through
          case 57: break;
          case 25:
            { yybegin(DEFINE_NEW_LINE);return DEFINE_LINE;
            }
          // fall through
          case 58: break;
          case 26:
            { yybegin(DEFINE);return DEFINE_LINE;
            }
          // fall through
          case 59: break;
          case 27:
            { return FLOATING_POINT_LITERAL;
            }
          // fall through
          case 60: break;
          case 28:
            { return COMMENT;
            }
          // fall through
          case 61: break;
          case 29:
            { return KEYWORD;
            }
          // fall through
          case 62: break;
          case 30:
            { yybegin(YYINITIAL);return COMMENT;
            }
          // fall through
          case 63: break;
          case 31:
            { { yybegin(DEFINE);return DEFINE_LINE; }
            }
          // fall through
          case 64: break;
          case 32:
            { return TYPE;
            }
          // fall through
          case 65: break;
          case 33:
            { yybegin(PRETREATMENT);return PRETREATMENT_LINE;
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
